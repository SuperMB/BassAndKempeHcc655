@*Filter Options Page*@ 
@using HccCoffeeMaker.Models.CoffeeMakerModels;
@using System.Collections.Generic;

@{
    ViewData["Title"] = "Filter Page";
}

<link rel="stylesheet" type="text/css" href="~/css/Filters.css" />


<script src="~/js/jquery-1.3.2-vsdoc2.js"></script>
<script src="~/js/Filter.js"></script>




<div style="height:50px;"></div>

<div id="myDiv" class="modal"></div>




<div style="height:10px;"></div>
<div style="font-size:var(--extraLargeFont)">Select facets to filter on </div>
<div style="height:50px;"></div>

@{ var title = "";}
@{ var spaceUnderFacetSelectorTitle = "50px";}
<div style="text-align:center;width:100%;">
    @{title = "price";}
    <div id="@(title)AddedHead"></div>
    <div id="@(title)Added" class="addedFilter">
        Price <br />
        <div style="height:50px;"></div>
        <div style="font-size:var(--smallMediumFont)">
            The average price for coffee makers is $67.
        </div>
        <div class="listOptions">
            @foreach (AmazonProductModel.PriceOptions price in Enum.GetValues(typeof(AmazonProductModel.PriceOptions)))
            {
                <input type="checkbox" name="@(title)" value=@price.ToString() 
                    @( ((List<string>)ViewData["price"]) != null ? (((List<string>)ViewData["price"]).Contains(price.ToString()) ? "checked" : "" ) : "")
                /> @AmazonProductModel.OptionsString(price)<br />
            }
        </div>
        <span id="@(title)AddedSelect" class="addedFacetSelect" onclick="clickSelect(this.id)">✓</span>
        <span id="@(title)AddedClose" class="addedFacetClose" onclick="clickClose(this.id)">X</span>
    </div>
    <div class="filterElement" id="@(title)" onclick="clickFacet(this.id)">
        <span class="filterText">Price</span>
    </div>
    @{title = "color";}
    <div id="@(title)Added" class="addedFilter">
        Color <br />
        <div style="height:20px;"></div>
        <div style="font-size:var(--smallMediumFont)">
            While black and silver coffee makers are common, more vibrant colors are also fun.
        </div>
        <div class="listOptions">
            @foreach (AmazonProductModel.ColorOptions color in Enum.GetValues(typeof(AmazonProductModel.ColorOptions)))
            {
                <input type="checkbox" name="@(title)" value=@color.ToString() 
                    @( ((List<string>)ViewData["color"]) != null ? (((List<string>)ViewData["color"]).Contains(color.ToString()) ? "checked" : "" ) : "")       
                /> @AmazonProductModel.OptionsString(color) <br>
            }
        </div>
        <span id="@(title)AddedSelect" class="addedFacetSelect" onclick="clickSelect(this.id)">✓</span>
        <span id="@(title)AddedClose" class="addedFacetClose" onclick="clickClose(this.id)">X</span>
    </div>
    <div class="filterElement" id="@(title)" onclick="clickFacet(this.id)">
        <span class="filterText">Color</span>
    </div>

    @{title = "durability";}
    <div id="@(title)Added" class="addedFilter">
        Durability <br />
        <div style="height:50px;"></div>
        <div style="font-size:var(--smallMediumFont)">
            Most people are plenty satisfied with light and normal use coffee makers. 
        </div>
        <div class="listOptions">
            @foreach (AmazonProductModel.DurabilityOptions durability in Enum.GetValues(typeof(AmazonProductModel.DurabilityOptions)))
            {
                <input type="checkbox" name="@(title)" value=@durability.ToString() 
                    @( ((List<string>)ViewData["durability"]) != null ? (((List<string>)ViewData["durability"]).Contains(durability.ToString()) ? "checked" : "" ) : "")       
                /> @AmazonProductModel.OptionsString(durability) <br>
            }
        </div>
        <span id="@(title)AddedSelect" class="addedFacetSelect" onclick="clickSelect(this.id)">✓</span>
        <span id="@(title)AddedClose" class="addedFacetClose" onclick="clickClose(this.id)">X</span>
    </div>    
    <div class="filterElement" id="@(title)" onclick="clickFacet(this.id)">
        <span class="filterText">Durability</span>
    </div>
    @{title = "servingSize";}
    <div id="@(title)Added" class="addedFilter">
        Serving Size <br />
        <div style="height:7px;"></div>
        <div style="font-size:var(--smallMediumFont)">
            Only for yourself, or family and friends?
        </div>
        <div class="listOptions">
            @foreach (AmazonProductModel.ServingSizeOptions servingSize in Enum.GetValues(typeof(AmazonProductModel.ServingSizeOptions)))
            {
                <input type="checkbox" name="@(title)" value=@servingSize.ToString() 
                    @( ((List<string>)ViewData["servingSize"]) != null ? (((List<string>)ViewData["servingSize"]).Contains(servingSize.ToString()) ? "checked" : "" ) : "")       
                /> @AmazonProductModel.OptionsString(servingSize) <br>
            }
        </div>
        <span id="@(title)AddedSelect" class="addedFacetSelect" onclick="clickSelect(this.id)">✓</span>
        <span id="@(title)AddedClose" class="addedFacetClose" onclick="clickClose(this.id)">X</span>
    </div>
    <div class="filterElement" id="@(title)" onclick="clickFacet(this.id)">
        <span class="filterText">Serving Size</span>
    </div>
</div>

<div style="text-align:center;width:100%;">
    @{title = "brewingTime";}
    <div id="@(title)Added" class="addedFilter">
        Brewing Time <br />
        <div style="height:50px;"></div>
        <div style="font-size:var(--smallMediumFont)">
            A shorter brew time is useful for smaller, personal coffee machines. 
        </div>
        <div class="listOptions">
            @foreach (AmazonProductModel.BrewingTimeOptions brewingTime in Enum.GetValues(typeof(AmazonProductModel.BrewingTimeOptions)))
            {
                <input type="checkbox" name="@(title)" value=@brewingTime.ToString() 
                    @( ((List<string>)ViewData["brewingTime"]) != null ? (((List<string>)ViewData["brewingTime"]).Contains(brewingTime.ToString()) ? "checked" : "" ) : "")       
                /> @AmazonProductModel.OptionsString(brewingTime) <br>
            }
        </div>
        <span id="@(title)AddedSelect" class="addedFacetSelect" onclick="clickSelect(this.id)">✓</span>
        <span id="@(title)AddedClose" class="addedFacetClose" onclick="clickClose(this.id)">X</span>
    </div>
    <div class="filterElement" id="@(title)" onclick="clickFacet(this.id)">
        <span class="filterText">Brewing Time</span>
    </div>
    @{title = "brand";}
    <div id="@(title)Added" class="addedFilter">
        Brand <br />
        <div style="height:35px;"></div>
        <div style="font-size:var(--smallMediumFont)">
            Kuerig and Nespresso are newer premium brands. 
        </div>
        <div class="listOptions">
            @foreach (AmazonProductModel.BrandOptions brand in Enum.GetValues(typeof(AmazonProductModel.BrandOptions)))
            {
                <input type="checkbox" name="@(title)" value=@brand.ToString() 
                    @( ((List<string>)ViewData["brand"]) != null ? (((List<string>)ViewData["brand"]).Contains(brand.ToString()) ? "checked" : "" ) : "")       
                /> @AmazonProductModel.OptionsString(brand) <br>
            }
        </div>
        <span id="@(title)AddedSelect" class="addedFacetSelect" onclick="clickSelect(this.id)">✓</span>
        <span id="@(title)AddedClose" class="addedFacetClose" onclick="clickClose(this.id)">X</span>
    </div>
    <div class="filterElement" id="@(title)" onclick="clickFacet(this.id)">
        <span class="filterText">Brand</span>
    </div>

    @{title = "warranty";}
    <div id="@(title)Added" class="addedFilter">
        Warranty <br />
        <div style="height:35px;"></div>
        <div style="font-size:var(--smallMediumFont)">
            Although not a premium feature, a quality warranty can come in handy. 
        </div>
        <div class="listOptions">
            @foreach (AmazonProductModel.WarrantyOptions warranty in Enum.GetValues(typeof(AmazonProductModel.WarrantyOptions)))
            {
                <input type="checkbox" name="@(title)" value=@warranty.ToString() 
                    @( ((List<string>)ViewData["warranty"]) != null ? (((List<string>)ViewData["warranty"]).Contains(warranty.ToString()) ? "checked" : "" ) : "")       
                /> @AmazonProductModel.OptionsString(warranty) <br>
            }
        </div>
        <span id="@(title)AddedSelect" class="addedFacetSelect" onclick="clickSelect(this.id)">✓</span>
        <span id="@(title)AddedClose" class="addedFacetClose" onclick="clickClose(this.id)">X</span>
    </div>
    <div class="filterElement" id="@(title)" onclick="clickFacet(this.id)">
        <span class="filterText">Warranty</span>
    </div>

    @{title = "qualityOfCoffee";}
    <div id="@(title)Added" class="addedFilter">
        Quality of Coffee <br />
        <div style="height:70px;"></div>
        <div style="font-size:var(--smallMediumFont)">
            Experienced coffee enthusiast will enjoy the most premium coffee, while newcomers will enjoy all coffee. 
        </div>
        <div class="listOptions">
            @foreach (AmazonProductModel.QualityOfCoffeeOptions qualityOfCoffee in Enum.GetValues(typeof(AmazonProductModel.QualityOfCoffeeOptions)))
            {
                <input type="checkbox" name="@(title)" value=@qualityOfCoffee.ToString() 
                    @( ((List<string>)ViewData["qualityOfCoffee"]) != null ? (((List<string>)ViewData["qualityOfCoffee"]).Contains(qualityOfCoffee.ToString()) ? "checked" : "" ) : "")       
                /> @AmazonProductModel.OptionsString(qualityOfCoffee) <br>
            }
        </div>
        <span id="@(title)AddedSelect" class="addedFacetSelect" onclick="clickSelect(this.id)">✓</span>
        <span id="@(title)AddedClose" class="addedFacetClose" onclick="clickClose(this.id)">X</span>
    </div>
    <div class="filterElement" id="@(title)" onclick="clickFacet(this.id)">
        <span class="filterText">Quality of Coffee</span>
    </div>
</div>

@*<div style="height:200px;"></div>*@

<br />
<font style="color:var(--lightSeafoam)">.</font>
<br />
<hr />



<div style="height:50px;clear:both;"></div>
<form asp-controller="InitialOptions" asp-action="Index" method="post" style="text-align:center;" id="inputForm">
    <div id="formField" ondrop="drop(event)" ondragover="allowDrop(event)" style="text-align:center;width:100%;"></div>
    <br />
    <div style="clear:both;"></div>

    <div id="rightArrow"
         onclick="MoveToSelectionFromFilters(event, id)"
         onmouseover="MouseOverCursor(event, this.id)"
         onmouseout="MouseOutDefault(event, this.id)"
         style="display:none;">
        <font style="font-size:250px;"> > </font>
    </div>

    <input type="text" name="typeOfMachine" value="@ViewData["typeOfMachine"]" style="display:none" />
</form>


<a href="/TypeSelection/">
    <div id="leftArrow"
         onclick="Judgement(event, id)"
         onmouseover="MouseOverCursor(event, this.id)"
         onmouseout="MouseOutDefault(event, this.id)">
        <font style="font-size:250px;"> < </font>
    </div>
</a>

    

    
<script>
    
    window.onload = function () {
        @if (ViewData["facetsAdded"] != null)
        {
            @foreach (string facet in (List<string>)ViewData["facetsAdded"])
            {
                string functionParameter = facet + "AddedSelect";
                <text>clickSelect("@functionParameter");</text>
            }
        }
    };

</script>